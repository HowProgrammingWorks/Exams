{
  "name": "exams",
  "version": "1.0.0",
  "description": "- Для начала, каждый должен иметь github аккаунт, если нет - регистрируемся\r - Посмотрите семинары с консультациями к экзамену:\r   - https://youtu.be/eYjf_WrYAqk\r   - https://youtu.be/05iTAT_t6cI\r - Посмотрите видео по антипаттернам и рефакторингу:\r   - https://www.youtube.com/playlist?list=PLHhi8ymDMrQb3PVcPFAUI-ZgtAMkpq9yV\r - Если кто потерялся, то материалы курса тут:\r   - https://github.com/HowProgrammingWorks/Index/blob/master/Courses/Fundamentals.md\r - Сделайте форк этого репозитория https://github.com/HowProgrammingWorks/Exams\r - Склонируйте репозиторий к себе на машину или вы можете делать задания прямо в веб-интерфейсе гитхаба\r - В своем форке сделайте ветку `exams` и в ней дальше выполните задания\r - В директории `Tasks` есть 38 заданий, выберите себе любые 2 из них\r - В файле с заданием написан плохой код, вам нужно его оптимизировать в несколько шагов\r - Код задания работает, и выдает правильный результат, вам нужно исправлять файл, но не сломать код\r - Дл работы с кодом вам может понадобиться:\r   - Runtime - [Node.js](https://nodejs.org/en/) с менеджером пакетов: [npm](https://www.npmjs.com/)\r   - Линтер - проверка стиля кода и анализ синтаксиса - [ESLint](http://eslint.org/)\r   - VCS - система контроля версий - [GitHub](https://github.com/), [Git](https://git-scm.com/), [GUI](https://desktop.github.com/)\r   - IDE - редактор или среда разработки, например: [Vim](http://www.vim.org/), [Visual Studio Code](https://code.visualstudio.com/)\r - Используйте тесты из каталога `Tests` для проверки решений. Чтобы запустить пример с тестами:\r   - в папке с кодом пишем, например: `node size.js`\r   - получаем в терминале: `Passed: 11 of 11` или ошибки\r - Ваша задача улучшить:\r   - Понятность кода,\r   - Стиль,\r   - Простоту,\r   - Качество,\r   - Поддерживаемость,\r   - Надежность,\r   - Тестируемость\r - Найдите себе двух друзей из группы и сделайте перекрестный ревью кода в пул-реквестах\r - Тут чеклист частых ошибок (после ревью они точно должны быть исправлены):\r   - Не модифицируйте входные параметры функций\r   - Предпочитайте стрелочніе функции для JavaScript и `lambda` для `Python`\r   - Используйте eslint и prettier для JavaScript с нашими настройками (см. в корне этого репозитория)\r   - Предпочтительно использвать `for..of` или `for` по переменной или `Array/map`, и избегайте `for..in` и `forEach`\r   - Используйте промежуточные идентификаторы разделяя длинные выражения\r   - Предпочитайте `const` и в крайнем случае используйте `let`, но никогда не используйте `var`\r   - Преобразуйте все магические значения в константы\r   - Придерживайтесь правил именования идентификаторов\r   - Хорошо подумайте над именами идентификаторов, чтобы при прочтении кода всем было понятно их содержимое\r   - Не делайте слишком длнииых функций\r   - Не делайте большую стопку if-выражений, вместо этого используйте массивы и объекты\r - Если вы пишете **не** на js, то переведите код на свой язык, насколько это возможно\r - Каждый шаг делайте отдельным коммитом, важно не переписать с нуля, а именно пошагово улучшать. На второй консультации я показал пример того, как нужно оптимизировать код\r - Когда закончите - сделайте пул-реквест в мой репозиторий и заполните форму, в которой укажите ссылку на свой форк с готовым заданием: https://forms.gle/qmbwSNCSbtDf6g4X7\r - Всем успехов в Новом Году и на экзамене!",
  "main": "test.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/M-Rybalko/Exams.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/M-Rybalko/Exams/issues"
  },
  "homepage": "https://github.com/M-Rybalko/Exams#readme",
  "dependencies": {
    "eslint": "^8.31.0"
  }
}
